////////////////////////////////////////////////////////////
//
// Created by Emre
// Worked on by Dale and Connor
//
////////////////////////////////////////////////////////////
#ifndef _BASETOWER_H
#define _BASETOWER_H
////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include "Building.h"
#include "Rocket.h"
#include "Label.h"
#include <vector>
#include "GameData.h"
#include "CheckShaders.h"
#include "SoundManager.h"



class BaseTower : public Building{
public:
	////////////////////////////////////////////////////////////
	/// Default constructor
	///
	////////////////////////////////////////////////////////////
	BaseTower();

	////////////////////////////////////////////////////////////
	/// Default destructor
	///
	////////////////////////////////////////////////////////////
	~BaseTower();

	////////////////////////////////////////////////////////////
	/// Overloaded constructor
	///
	////////////////////////////////////////////////////////////
	BaseTower(shared_ptr<GameData> &data, int radius);

	////////////////////////////////////////////////////////////
	/// Sets the position of the tower on the grid.
	///
	////////////////////////////////////////////////////////////
	void setPosition(Vector2f pos);

	////////////////////////////////////////////////////////////
	/// Updates the object
	///
	////////////////////////////////////////////////////////////
	void update();

	////////////////////////////////////////////////////////////
	/// Shoots the cannon
	///
	////////////////////////////////////////////////////////////
	void fire(Vector2f & target); 

	////////////////////////////////////////////////////////////
	/// Draws the object
	///
	////////////////////////////////////////////////////////////
	void render(RenderWindow & window);

	////////////////////////////////////////////////////////////
	/// Takes away from the max health if hit by an enemy
	///
	////////////////////////////////////////////////////////////
	void subtractHealth(int damage);



	vector<shared_ptr<Rocket>> ammunition;
	shared_ptr<CheckShaders> shaders;
	Label healthLabel;
	float coolTimer = 0;
	float cooldown = 1;
	bool canFire = false;
	int m_health = 2000;
	vector<shared_ptr<Rocket>> getBullets();
	SoundManager fired;
private:
	

};
#endif