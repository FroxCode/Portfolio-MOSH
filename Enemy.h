////////////////////////////////////////////////////////////
//
// Created by Connor
// Worked on by Dale
//
////////////////////////////////////////////////////////////
#ifndef _ENEMY_H_
#define _ENEMY_H_
////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <SFML\Graphics.hpp>
#include <memory>
#include "Animation.hpp"
#include "AnimatedSprite.hpp"
#include "BaseTower.h"
#include "SoundManager.h"

using namespace std;
using namespace sf;
class Enemy
{
public:
	////////////////////////////////////////////////////////////
	/// Default constructor
	///
	////////////////////////////////////////////////////////////
	Enemy();

	////////////////////////////////////////////////////////////
	/// Default destructor
	///
	////////////////////////////////////////////////////////////
	~Enemy();

	////////////////////////////////////////////////////////////
	/// Overloaded constructor
	///
	////////////////////////////////////////////////////////////
	Enemy(string const &texture, string const &deathSnd, vector<shared_ptr<Vector2f>> nodes);

	////////////////////////////////////////////////////////////
	/// Creates the animation using a spritesheet
	/// and plays the animation
	////////////////////////////////////////////////////////////
	void animate();

	////////////////////////////////////////////////////////////
	/// Draws the object
	///
	////////////////////////////////////////////////////////////
	void render(RenderWindow &window);

	////////////////////////////////////////////////////////////
	/// Updates the object
	///
	////////////////////////////////////////////////////////////
	void update();

	enum State {Idle, Walking, Attacking, Death};
	State state = State::Walking;
	vector<Vector2f> m_nodes;
	int m_nodeIndex = 0;
	bool m_isAlive = false;
	float m_velocity;
	int health;
	Vector2f m_position;
	Texture m_texture;
	sf::IntRect bounds;
	int m_damage;
	void slow();
	bool slowed = false;
	int slowTimer = 0;
	SoundManager deathSound;
private:

	float const FPS = 1.f / 60.f;
	float distance;
	Vector2f direction;
	Vector2f startPoint;
	Vector2f endPoint;
	Animation walkingAnimation;
	AnimatedSprite animatedSprite;
	Animation* currentAnimation;
	Clock m_clock;
	Time m_time;



};



#endif;